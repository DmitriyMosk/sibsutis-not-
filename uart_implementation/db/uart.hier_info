|uart
clk => clk.IN1
rst => rst.IN5
rx => rx.IN1
tx << uart_tx:tx_inst.tx
led << uart_rx:rx_inst.led


|uart|pll:pll_inst
areset => areset.IN1
clkswitch => clkswitch.IN1
configupdate => configupdate.IN1
inclk0 => sub_wire1[0].IN1
inclk1 => sub_wire1[1].IN1
pfdena => pfdena.IN1
scanclk => scanclk.IN1
scanclkena => scanclkena.IN1
scandata => scandata.IN1
c0 <= altpll:altpll_component.clk
locked <= altpll:altpll_component.locked
scandataout <= altpll:altpll_component.scandataout
scandone <= altpll:altpll_component.scandone


|uart|pll:pll_inst|altpll:altpll_component
inclk[0] => pll_altpll:auto_generated.inclk[0]
inclk[1] => pll_altpll:auto_generated.inclk[1]
fbin => ~NO_FANOUT~
pllena => ~NO_FANOUT~
clkswitch => pll_altpll:auto_generated.clkswitch
areset => pll_altpll:auto_generated.areset
pfdena => pll_altpll:auto_generated.pfdena
clkena[0] => ~NO_FANOUT~
clkena[1] => ~NO_FANOUT~
clkena[2] => ~NO_FANOUT~
clkena[3] => ~NO_FANOUT~
clkena[4] => ~NO_FANOUT~
clkena[5] => ~NO_FANOUT~
extclkena[0] => ~NO_FANOUT~
extclkena[1] => ~NO_FANOUT~
extclkena[2] => ~NO_FANOUT~
extclkena[3] => ~NO_FANOUT~
scanclk => pll_altpll:auto_generated.scanclk
scanclkena => pll_altpll:auto_generated.scanclkena
scanaclr => ~NO_FANOUT~
scanread => ~NO_FANOUT~
scanwrite => ~NO_FANOUT~
scandata => pll_altpll:auto_generated.scandata
phasecounterselect[0] => ~NO_FANOUT~
phasecounterselect[1] => ~NO_FANOUT~
phasecounterselect[2] => ~NO_FANOUT~
phasecounterselect[3] => ~NO_FANOUT~
phaseupdown => ~NO_FANOUT~
phasestep => ~NO_FANOUT~
configupdate => pll_altpll:auto_generated.configupdate
fbmimicbidir <> <GND>
clk[0] <= clk[0].DB_MAX_OUTPUT_PORT_TYPE
clk[1] <= clk[1].DB_MAX_OUTPUT_PORT_TYPE
clk[2] <= clk[2].DB_MAX_OUTPUT_PORT_TYPE
clk[3] <= clk[3].DB_MAX_OUTPUT_PORT_TYPE
clk[4] <= clk[4].DB_MAX_OUTPUT_PORT_TYPE
extclk[0] <= <GND>
extclk[1] <= <GND>
extclk[2] <= <GND>
extclk[3] <= <GND>
clkbad[0] <= <GND>
clkbad[1] <= <GND>
enable1 <= <GND>
enable0 <= <GND>
activeclock <= <GND>
clkloss <= <GND>
locked <= pll_altpll:auto_generated.locked
scandataout <= pll_altpll:auto_generated.scandataout
scandone <= pll_altpll:auto_generated.scandone
sclkout0 <= <GND>
sclkout1 <= <GND>
phasedone <= <GND>
vcooverrange <= <GND>
vcounderrange <= <GND>
fbout <= <GND>
fref <= <GND>
icdrclk <= <GND>


|uart|pll:pll_inst|altpll:altpll_component|pll_altpll:auto_generated
areset => pll_lock_sync.ACLR
areset => pll1.ARESET
clk[0] <= pll1.CLK
clk[1] <= pll1.CLK1
clk[2] <= pll1.CLK2
clk[3] <= pll1.CLK3
clk[4] <= pll1.CLK4
clkswitch => pll1.CLKSWITCH
configupdate => pll1.CONFIGUPDATE
inclk[0] => pll1.CLK
inclk[1] => pll1.CLK1
locked <= locked.DB_MAX_OUTPUT_PORT_TYPE
pfdena => pll1.PFDENA
scanclk => pll1.SCANCLK
scanclkena => pll1.SCANCLKENA
scandata => pll1.SCANDATA
scandataout <= pll1.SCANDATAOUT
scandone <= pll1.SCANDONE


|uart|uart_rx:rx_inst
clk => data_out[0]~reg0.CLK
clk => data_out[1]~reg0.CLK
clk => data_out[2]~reg0.CLK
clk => data_out[3]~reg0.CLK
clk => data_out[4]~reg0.CLK
clk => data_out[5]~reg0.CLK
clk => data_out[6]~reg0.CLK
clk => data_out[7]~reg0.CLK
clk => receiving.CLK
clk => led~reg0.CLK
clk => valid~reg0.CLK
clk => shift_reg[0].CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => bit_count[0].CLK
clk => bit_count[1].CLK
clk => bit_count[2].CLK
clk => bit_count[3].CLK
clk => tick_count[0].CLK
clk => tick_count[1].CLK
clk => tick_count[2].CLK
clk => tick_count[3].CLK
clk => tick_count[4].CLK
clk => tick_count[5].CLK
clk => tick_count[6].CLK
clk => tick_count[7].CLK
clk => tick_count[8].CLK
clk => tick_count[9].CLK
clk => tick_count[10].CLK
clk => tick_count[11].CLK
clk => tick_count[12].CLK
clk => tick_count[13].CLK
clk => tick_count[14].CLK
clk => tick_count[15].CLK
rst => receiving.ACLR
rst => led~reg0.ACLR
rst => valid~reg0.ACLR
rst => shift_reg[0].ACLR
rst => shift_reg[1].ACLR
rst => shift_reg[2].ACLR
rst => shift_reg[3].ACLR
rst => shift_reg[4].ACLR
rst => shift_reg[5].ACLR
rst => shift_reg[6].ACLR
rst => shift_reg[7].ACLR
rst => bit_count[0].ACLR
rst => bit_count[1].ACLR
rst => bit_count[2].ACLR
rst => bit_count[3].ACLR
rst => tick_count[0].ACLR
rst => tick_count[1].ACLR
rst => tick_count[2].ACLR
rst => tick_count[3].ACLR
rst => tick_count[4].ACLR
rst => tick_count[5].ACLR
rst => tick_count[6].ACLR
rst => tick_count[7].ACLR
rst => tick_count[8].ACLR
rst => tick_count[9].ACLR
rst => tick_count[10].ACLR
rst => tick_count[11].ACLR
rst => tick_count[12].ACLR
rst => tick_count[13].ACLR
rst => tick_count[14].ACLR
rst => tick_count[15].ACLR
rst => data_out[0]~reg0.ENA
rst => data_out[7]~reg0.ENA
rst => data_out[6]~reg0.ENA
rst => data_out[5]~reg0.ENA
rst => data_out[4]~reg0.ENA
rst => data_out[3]~reg0.ENA
rst => data_out[2]~reg0.ENA
rst => data_out[1]~reg0.ENA
rx => shift_reg.DATAB
rx => always0.IN1
data_out[0] <= data_out[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[1] <= data_out[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[2] <= data_out[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[3] <= data_out[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[4] <= data_out[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[5] <= data_out[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[6] <= data_out[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[7] <= data_out[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
valid <= valid~reg0.DB_MAX_OUTPUT_PORT_TYPE
led <= led~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart|shift_reg:shift_reg_inst
clk => data_out[0]~reg0.CLK
clk => data_out[1]~reg0.CLK
clk => data_out[2]~reg0.CLK
clk => data_out[3]~reg0.CLK
clk => data_out[4]~reg0.CLK
clk => data_out[5]~reg0.CLK
clk => data_out[6]~reg0.CLK
clk => data_out[7]~reg0.CLK
rst => data_out[0]~reg0.ACLR
rst => data_out[1]~reg0.ACLR
rst => data_out[2]~reg0.ACLR
rst => data_out[3]~reg0.ACLR
rst => data_out[4]~reg0.ACLR
rst => data_out[5]~reg0.ACLR
rst => data_out[6]~reg0.ACLR
rst => data_out[7]~reg0.ACLR
data_in[0] => data_out.DATAB
data_in[1] => data_out.DATAB
data_in[2] => data_out.DATAB
data_in[3] => data_out.DATAB
data_in[4] => data_out.DATAB
data_in[5] => data_out.DATAB
data_in[6] => data_out.DATAB
data_in[7] => data_out.DATAB
load => data_out.OUTPUTSELECT
load => data_out.OUTPUTSELECT
load => data_out.OUTPUTSELECT
load => data_out.OUTPUTSELECT
load => data_out.OUTPUTSELECT
load => data_out.OUTPUTSELECT
load => data_out.OUTPUTSELECT
load => data_out.OUTPUTSELECT
data_out[0] <= data_out[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[1] <= data_out[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[2] <= data_out[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[3] <= data_out[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[4] <= data_out[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[5] <= data_out[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[6] <= data_out[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[7] <= data_out[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart|fifo:fifo_inst
clk => mem.we_a.CLK
clk => mem.waddr_a[3].CLK
clk => mem.waddr_a[2].CLK
clk => mem.waddr_a[1].CLK
clk => mem.waddr_a[0].CLK
clk => mem.data_a[7].CLK
clk => mem.data_a[6].CLK
clk => mem.data_a[5].CLK
clk => mem.data_a[4].CLK
clk => mem.data_a[3].CLK
clk => mem.data_a[2].CLK
clk => mem.data_a[1].CLK
clk => mem.data_a[0].CLK
clk => data_out[0]~reg0.CLK
clk => data_out[1]~reg0.CLK
clk => data_out[2]~reg0.CLK
clk => data_out[3]~reg0.CLK
clk => data_out[4]~reg0.CLK
clk => data_out[5]~reg0.CLK
clk => data_out[6]~reg0.CLK
clk => data_out[7]~reg0.CLK
clk => empty~reg0.CLK
clk => full~reg0.CLK
clk => count[0].CLK
clk => count[1].CLK
clk => count[2].CLK
clk => count[3].CLK
clk => count[4].CLK
clk => rd_ptr[0].CLK
clk => rd_ptr[1].CLK
clk => rd_ptr[2].CLK
clk => rd_ptr[3].CLK
clk => wr_ptr[0].CLK
clk => wr_ptr[1].CLK
clk => wr_ptr[2].CLK
clk => wr_ptr[3].CLK
clk => mem.CLK0
rst => data_out[0]~reg0.ACLR
rst => data_out[1]~reg0.ACLR
rst => data_out[2]~reg0.ACLR
rst => data_out[3]~reg0.ACLR
rst => data_out[4]~reg0.ACLR
rst => data_out[5]~reg0.ACLR
rst => data_out[6]~reg0.ACLR
rst => data_out[7]~reg0.ACLR
rst => empty~reg0.PRESET
rst => full~reg0.ACLR
rst => count[0].ACLR
rst => count[1].ACLR
rst => count[2].ACLR
rst => count[3].ACLR
rst => count[4].ACLR
rst => rd_ptr[0].ACLR
rst => rd_ptr[1].ACLR
rst => rd_ptr[2].ACLR
rst => rd_ptr[3].ACLR
rst => wr_ptr[0].ACLR
rst => wr_ptr[1].ACLR
rst => wr_ptr[2].ACLR
rst => wr_ptr[3].ACLR
rst => comb.IN1
data_in[0] => mem.data_a[0].DATAIN
data_in[0] => mem.DATAIN
data_in[1] => mem.data_a[1].DATAIN
data_in[1] => mem.DATAIN1
data_in[2] => mem.data_a[2].DATAIN
data_in[2] => mem.DATAIN2
data_in[3] => mem.data_a[3].DATAIN
data_in[3] => mem.DATAIN3
data_in[4] => mem.data_a[4].DATAIN
data_in[4] => mem.DATAIN4
data_in[5] => mem.data_a[5].DATAIN
data_in[5] => mem.DATAIN5
data_in[6] => mem.data_a[6].DATAIN
data_in[6] => mem.DATAIN6
data_in[7] => mem.data_a[7].DATAIN
data_in[7] => mem.DATAIN7
wr_en => always0.IN1
rd_en => always0.IN1
data_out[0] <= data_out[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[1] <= data_out[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[2] <= data_out[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[3] <= data_out[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[4] <= data_out[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[5] <= data_out[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[6] <= data_out[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[7] <= data_out[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
full <= full~reg0.DB_MAX_OUTPUT_PORT_TYPE
empty <= empty~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart|uart_tx:tx_inst
clk => tx~reg0.CLK
clk => busy~reg0.CLK
clk => shift_reg[0].CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => shift_reg[8].CLK
clk => shift_reg[9].CLK
clk => bit_count[0].CLK
clk => bit_count[1].CLK
clk => bit_count[2].CLK
clk => bit_count[3].CLK
clk => tick_count[0].CLK
clk => tick_count[1].CLK
clk => tick_count[2].CLK
clk => tick_count[3].CLK
clk => tick_count[4].CLK
clk => tick_count[5].CLK
clk => tick_count[6].CLK
clk => tick_count[7].CLK
clk => tick_count[8].CLK
clk => tick_count[9].CLK
clk => tick_count[10].CLK
clk => tick_count[11].CLK
clk => tick_count[12].CLK
clk => tick_count[13].CLK
clk => tick_count[14].CLK
clk => tick_count[15].CLK
rst => tx~reg0.PRESET
rst => busy~reg0.ACLR
rst => shift_reg[0].PRESET
rst => shift_reg[1].PRESET
rst => shift_reg[2].PRESET
rst => shift_reg[3].PRESET
rst => shift_reg[4].PRESET
rst => shift_reg[5].PRESET
rst => shift_reg[6].PRESET
rst => shift_reg[7].PRESET
rst => shift_reg[8].PRESET
rst => shift_reg[9].PRESET
rst => bit_count[0].ACLR
rst => bit_count[1].ACLR
rst => bit_count[2].ACLR
rst => bit_count[3].ACLR
rst => tick_count[0].ACLR
rst => tick_count[1].ACLR
rst => tick_count[2].ACLR
rst => tick_count[3].ACLR
rst => tick_count[4].ACLR
rst => tick_count[5].ACLR
rst => tick_count[6].ACLR
rst => tick_count[7].ACLR
rst => tick_count[8].ACLR
rst => tick_count[9].ACLR
rst => tick_count[10].ACLR
rst => tick_count[11].ACLR
rst => tick_count[12].ACLR
rst => tick_count[13].ACLR
rst => tick_count[14].ACLR
rst => tick_count[15].ACLR
start => always0.IN1
data_in[0] => shift_reg.DATAB
data_in[1] => shift_reg.DATAB
data_in[2] => shift_reg.DATAB
data_in[3] => shift_reg.DATAB
data_in[4] => shift_reg.DATAB
data_in[5] => shift_reg.DATAB
data_in[6] => shift_reg.DATAB
data_in[7] => shift_reg.DATAB
tx <= tx~reg0.DB_MAX_OUTPUT_PORT_TYPE
busy <= busy~reg0.DB_MAX_OUTPUT_PORT_TYPE


