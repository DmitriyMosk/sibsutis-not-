#ifndef _LIB_TERMINAL_WINAPI
#define _LIB_TERMINAL_WINAPI
    #include <windows.h> 

    /**
     * Библиотека term_winapi предоставляет интерфейс для работы с консолью Windows. 
     * Позволяет изменять настройки терминала, управлять курсором, выводить символы с цветами, 
     * и настраивать режим консоли.
     */
    namespace term_winapi {
        /**
         * Статическая переменная `h_console` хранит дескриптор текущей консоли.
         * Используется для выполнения операций с консолью через Windows API.
         */
        static HANDLE h_console; 

        /**
         * Статическая переменная `h_console_mode` хранит текущий режим консоли (битовая маска).
         * Используется для управления состоянием консоли.
         */
        static DWORD  h_console_mode; 

        /**
         * Перечисление цветов, которые могут быть использованы для текста и фона консоли.
         * Каждый цвет соответствует определенному значению из Windows API:
         * - BLACK: Черный цвет (0)
         * - BLUE: Синий цвет (1)
         * - GREEN: Зеленый цвет (2)
         * - CYAN: Голубой цвет (3)
         * - RED: Красный цвет (4)
         * - MAGENTA: Пурпурный цвет (5)
         * - BROWN: Коричневый цвет (6)
         * - LIGHTGRAY: Светло-серый цвет (7)
         * - DARKGRAY: Темно-серый цвет (8)
         * - LIGHTBLUE: Светло-синий цвет (9)
         * - LIGHTGREEN: Светло-зеленый цвет (10)
         * - LIGHTCYAN: Светло-голубой цвет (11)
         * - LIGHTRED: Светло-красный цвет (12)
         * - LIGHTMAGENTA: Светло-пурпурный цвет (13)
         * - YELLOW: Желтый цвет (14)
         * - WHITE: Белый цвет (15)
         */
        enum scr_color { 
            BLACK=0, 
            BLUE=1,
            GREEN=2, 
            CYAN=3,
            RED=4,
            MAGENTA=5,
            BROWN=6,
            LIGHTGRAY=7, 
            DARKGRAY=8,
            LIGHTBLUE=9,
            LIGHTGREEN=10,
            LIGHTCYAN=11,
            LIGHTRED=12,
            LIGHTMAGENTA=13,
            YELLOW=14,
            WHITE=15
        };

        /**
         * Инициализирует дескриптор консоли и режим консоли. 
         * Должна быть вызвана перед использованием других функций библиотеки.
         */
        void terminal_api_instance();

        /**
         * Получает текущий размер окна консоли.
         * 
         * @param w - переменная для записи ширины консольного окна (в символах).
         * @param h - переменная для записи высоты консольного окна (в символах).
         * 
         * @return Возвращает 0 при успешном выполнении, либо код ошибки.
         */
        int get_window_size(int &w, int &h); 

        /**
         * Получает текущую позицию курсора в консоли.
         * 
         * @param x - переменная для записи текущей координаты X курсора.
         * @param y - переменная для записи текущей координаты Y курсора.
         * 
         * @return Возвращает 0 при успешном выполнении, либо код ошибки.
         */
        int get_cursor_pos(int &x, int &y);

        /**
         * Устанавливает позицию курсора в консоли.
         * 
         * @param x - новая координата X для курсора (0 - ширина окна консоли - 1).
         * @param y - новая координата Y для курсора (0 - высота окна консоли - 1).
         * 
         * @return Возвращает 0 при успешном выполнении, либо код ошибки.
         */
        int set_cursor_pos(int x, int y); 

        /**
         * Изменяет тип и видимость курсора в консоли.
         * 
         * @param visible - флаг видимости курсора (true - видим, false - невидим).
         * @param size - размер курсора в процентах от 1 до 100. Если значение выходит за пределы, применяется округление.
         * 
         * @return Возвращает 0 при успешном выполнении, либо код ошибки.
         */
        int set_cursor_type(bool visible, DWORD size);

        /**
         * Получает текущий режим консоли (битовая маска).
         * 
         * @param mode - переменная для записи текущего режима консоли.
         * 
         * @return Возвращает 0 при успешном выполнении, либо код ошибки.
         */
        int get_terminal_mode(DWORD &mode);

        /**
         * Устанавливает или сбрасывает определенные флаги режима консоли.
         * 
         * @param mode - битовая маска режима, который необходимо установить или сбросить.
         * @param operation - тип операции (true - установка флагов, false - сброс флагов).
         * 
         * @return Возвращает 0 при успешном выполнении, либо код ошибки.
         */
        int set_terminal_mode(DWORD mode, bool operation);

        /**
         * Выводит одиночный символ с указанными цветами текста и фона.
         * 
         * @param symbol - указатель на символ, который нужно вывести.
         * @param fclr - цвет текста (из перечисления scr_color).
         * @param bclr - цвет фона (из перечисления scr_color).
         * 
         * @return Возвращает 0 при успешном выполнении, либо код ошибки.
         */
        int out_symbol(const char *symbol, scr_color fclr, scr_color bclr); 

        /**
         * Выводит строку символов с указанными цветами текста и фона.
         * 
         * @param symbols - указатель на строку символов для вывода.
         * @param len - длина строки (количество символов для вывода).
         * @param fclr - цвет текста (из перечисления scr_color).
         * @param bclr - цвет фона (из перечисления scr_color).
         * 
         * @return Возвращает 0 при успешном выполнении, либо код ошибки.
         */
        int out_line(const char *symbols, unsigned long len, scr_color fclr, scr_color bclr);

        /**
         * Устанавливает текущие цвета текста и фона консоли.
         * 
         * @param fclr - цвет текста (из перечисления scr_color).
         * @param bclr - цвет фона (из перечисления scr_color).
         * 
         * @return Возвращает 0 при успешном выполнении, либо код ошибки.
         */
        int set_csbi_color(scr_color fclr, scr_color bclr);

        /**
         * Получает текущие цвета текста и фона консоли.
         * 
         * @param fclr - переменная для записи текущего цвета текста.
         * @param bclr - переменная для записи текущего цвета фона.
         * 
         * @return Возвращает 0 при успешном выполнении, либо код ошибки.
         */
        int get_csbi_color(scr_color &fclr, scr_color &bclr); 
    }
#endif 